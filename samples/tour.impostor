#! /usr/bin/env impostor

# This is a tour of Impostor in code.

# Impostor is a mock server that uses a simple, text based format to define
# mocks.

# As you can see, lines starting with a hash are comments.

# Let's define our first mock:

GET /
# This is the request line. It must have the method and path. The path shouldn't
# have any query string.
HTTP 200
`hello, world!`
# This is the response. It must have HTTP followed by the status code. You can
# optionally add a body. In this case, the body is a single line string: hello,
# world!. The backticks are used to delimit the string, and won't be present in
# the response.

# You define multiple routes in the same file. Let's define another one:

POST /
HTTP 201
# Let's add a header to the response:
Content-Type: application/json
# For JSON bodies, you don't need to quote the response in backticks.
{"id": 1}

# And some more:

PUT /
HTTP 200
`updated`

DELETE /
HTTP 204

# As you can see, the body is optional.

# If you want to match requests based on parameters in the request, you can use
# Asserts. Asserts are defined in the request section:

GET /users
[Asserts]
queryparam "name" == "John"

HTTP 200
{"name": "John"}

# Each assert has two parts: a "query" and a "predicate". In this case, the
# query is `queryparam name` and the predicate is `== "John"`, which will match
# GET requests to /users?name=John. If the request doesn't have the name
# parameter, or if it has a different value, the mock won't match, and Impostor
# will return a 404.

# Apart from query params, you can query:
#
# - Headers with the `header` query:

GET /users
[Asserts]
# Please don't actually do this.
header "X-User-Name" == "John"

HTTP 200
{"name": "John"}

# - Cookies with the `cookie` query:

GET /users
[Asserts]
cookie "user_name" == "John"

HTTP 200
{"name": "John"}

# As you can see, you can have multiple mocks on the same route with different
# asserts. Impostor will go in the order they are defined in the mock file and
# use the first one that matches.

# Apart from a strict equality predicate, there are also other types:
#
# - `!=`:

GET /users
[Asserts]
queryparam "name" != "John"

HTTP 200
{"name": "Jane"}

# - startsWith, endsWith, contains:

GET /is_authorized
[Asserts]
queryparam "user_name" startsWith "J"

HTTP 200
{"is_authorized": true}

GET /is_authorized
[Asserts]
queryparam "user_name" endsWith "n"

HTTP 200
{"is_authorized": true}

GET /is_authorized
[Asserts]
queryparam "user_name" contains "oh"

HTTP 200
{"is_authorized": true}

GET /is_authorized

HTTP 200
{"is_authorized": false}

# - matches:

GET /better_is_authorized
[Asserts]
queryparam "user_name" matches /J(oh)?n/

HTTP 200
{"is_authorized": true}

GET /better_is_authorized

HTTP 200
{"is_authorized": false}

# - exist:

GET /offers
[Asserts]
queryparam "id" == "1"

HTTP 200
{"name": "Offer 1"}

GET /offers
[Asserts]
queryparam "id" exists

HTTP 404
{"error": "Offer not found"}

# You can also invert any predicate using the `not` keyword:

GET /offers
[Asserts]
queryparam "id" not exists

HTTP 400
{"error": "Expected offer id"}

# And finally, you can also implicitly define a header assert:

GET /orders
Accept: application/json
[Asserts]
queryparam "id" == "123"

HTTP 200
Content-Type: application/json
{"id": 123}

GET /orders
Accept: text/html
[Asserts]
queryparam "id" == "123"

HTTP 200
Content-Type: text/html
`<html><body>Order 123</body></html>`
